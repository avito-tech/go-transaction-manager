// Code generated by MockGen. DO NOT EDIT.
// Source: savepoint.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSavePoint is a mock of SavePoint interface.
type MockSavePoint struct {
	ctrl     *gomock.Controller
	recorder *MockSavePointMockRecorder
}

// MockSavePointMockRecorder is the mock recorder for MockSavePoint.
type MockSavePointMockRecorder struct {
	mock *MockSavePoint
}

// NewMockSavePoint creates a new mock instance.
func NewMockSavePoint(ctrl *gomock.Controller) *MockSavePoint {
	mock := &MockSavePoint{ctrl: ctrl}
	mock.recorder = &MockSavePointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSavePoint) EXPECT() *MockSavePointMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSavePoint) Create(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSavePointMockRecorder) Create(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSavePoint)(nil).Create), id)
}

// Release mocks base method.
func (m *MockSavePoint) Release(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockSavePointMockRecorder) Release(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockSavePoint)(nil).Release), id)
}

// Rollback mocks base method.
func (m *MockSavePoint) Rollback(id string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockSavePointMockRecorder) Rollback(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockSavePoint)(nil).Rollback), id)
}
