// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	transaction "github.com/avito-tech/go-transaction-manager/transaction"
	gomock "github.com/golang/mock/gomock"
)

// MockSPFactory is a mock of SPFactory interface.
type MockSPFactory struct {
	ctrl     *gomock.Controller
	recorder *MockSPFactoryMockRecorder
}

// MockSPFactoryMockRecorder is the mock recorder for MockSPFactory.
type MockSPFactoryMockRecorder struct {
	mock *MockSPFactory
}

// NewMockSPFactory creates a new mock instance.
func NewMockSPFactory(ctrl *gomock.Controller) *MockSPFactory {
	mock := &MockSPFactory{ctrl: ctrl}
	mock.recorder = &MockSPFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSPFactory) EXPECT() *MockSPFactoryMockRecorder {
	return m.recorder
}

// SavePoint mocks base method.
func (m *MockSPFactory) SavePoint(ctx context.Context, s transaction.Settings) (transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", ctx, s)
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MockSPFactoryMockRecorder) SavePoint(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MockSPFactory)(nil).SavePoint), ctx, s)
}

// MockTransaction is a mock of Transaction interface.
type MockTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionMockRecorder
}

// MockTransactionMockRecorder is the mock recorder for MockTransaction.
type MockTransactionMockRecorder struct {
	mock *MockTransaction
}

// NewMockTransaction creates a new mock instance.
func NewMockTransaction(ctrl *gomock.Controller) *MockTransaction {
	mock := &MockTransaction{ctrl: ctrl}
	mock.recorder = &MockTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransaction) EXPECT() *MockTransactionMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTransaction) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTransactionMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTransaction)(nil).Commit))
}

// IsActive mocks base method.
func (m *MockTransaction) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockTransactionMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockTransaction)(nil).IsActive))
}

// Rollback mocks base method.
func (m *MockTransaction) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockTransactionMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTransaction)(nil).Rollback))
}

// Transaction mocks base method.
func (m *MockTransaction) Transaction() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MockTransactionMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MockTransaction)(nil).Transaction))
}

// MocktransactionWithSP is a mock of transactionWithSP interface.
type MocktransactionWithSP struct {
	ctrl     *gomock.Controller
	recorder *MocktransactionWithSPMockRecorder
}

// MocktransactionWithSPMockRecorder is the mock recorder for MocktransactionWithSP.
type MocktransactionWithSPMockRecorder struct {
	mock *MocktransactionWithSP
}

// NewMocktransactionWithSP creates a new mock instance.
func NewMocktransactionWithSP(ctrl *gomock.Controller) *MocktransactionWithSP {
	mock := &MocktransactionWithSP{ctrl: ctrl}
	mock.recorder = &MocktransactionWithSPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktransactionWithSP) EXPECT() *MocktransactionWithSPMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MocktransactionWithSP) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MocktransactionWithSPMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MocktransactionWithSP)(nil).Commit))
}

// IsActive mocks base method.
func (m *MocktransactionWithSP) IsActive() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MocktransactionWithSPMockRecorder) IsActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MocktransactionWithSP)(nil).IsActive))
}

// Rollback mocks base method.
func (m *MocktransactionWithSP) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MocktransactionWithSPMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MocktransactionWithSP)(nil).Rollback))
}

// SavePoint mocks base method.
func (m *MocktransactionWithSP) SavePoint(ctx context.Context, s transaction.Settings) (transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePoint", ctx, s)
	ret0, _ := ret[0].(transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SavePoint indicates an expected call of SavePoint.
func (mr *MocktransactionWithSPMockRecorder) SavePoint(ctx, s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePoint", reflect.TypeOf((*MocktransactionWithSP)(nil).SavePoint), ctx, s)
}

// Transaction mocks base method.
func (m *MocktransactionWithSP) Transaction() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transaction")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Transaction indicates an expected call of Transaction.
func (mr *MocktransactionWithSPMockRecorder) Transaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transaction", reflect.TypeOf((*MocktransactionWithSP)(nil).Transaction))
}
